<?php

/**
 * Implements hook_entity_info().
 */
function basic_entity_plus_entity_info() {
  $return = array(
    'basic_entity_plus' => array(
      'label' => t('Basic Entity Plus entity'),
      'plural label' => t('Basic Entity Plus entities'), 
      'entity class' => 'BasicEntityPlus',
      'controller class' => 'BasicEntityPlusController',
      'base table' => 'basic_entity_plus',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'basic_entity_plus_id',
        'bundle' => 'type',
        'label' => 'title',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        // We provide a bundle definition in code. Others may be created
        // through the UI at admin/structure/basic_entity_plus-types
       ),
      'load hook' => 'basic_entity_plus_load',
      'view modes' => array(
      ),

      'label callback' => 'entity_label',

      // This key is also used by the core entity.tokens.inc to provide a url token
      'uri callback' => 'basic_entity_plus_uri', 

      'module' => 'basic_entity_plus',
      'access callback' => 'basic_entity_plus_access',

      // By including 'admin ui' we are telling Entity UI to create menu items 
      // for viewing, adding, editing and deleting basic_entity_plus entities
      'admin ui' => array(
        'path' => 'basic_entity_plus',
        'controller class' => 'EntityBundleableUIController',
        // Indicates the name of the file that contains the edit/add and delete forms
        // These forms must be named basic_entity_plus_form etc.
        'file' => 'basic_entity_plus.admin.inc',
        'menu wildcard' => '%basic_entity_plus',
       ),
    ),
  );

  // Definition for the bundle definition entity
  $return['basic_entity_plus_type'] = array(
    'label' => t('Basic Entity Plus type'),
    'entity class' => 'BasicEntityPlus',
    'controller class' => 'BasicEntityPlusTypeController',
    'base table' => 'basic_entity_plus_type',
    'fieldable' => FALSE,
    'bundle of' => 'basic_entity_plus',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
      'module' => 'module',
    ),
    'module' => 'basic_entity_plus',
    // Enable the entity API's admin UI to create 
    'admin ui' => array(
      'path' => 'admin/structure/basic_entity_plus-types',
      'file' => 'basic_entity_plus.admin.inc',
      'controller class' => 'EntityDefaultUIController',
    ),
    'access callback' => 'basic_entity_plus_type_access',
    'uri callback' => 'basic_entity_plus_type_uri',
  );

  return $return;
}

/**
 * Implements hook.autoload_info().
 */
function basic_entity_plus_autoload_info() {
  return array(
    'BasicEntityPlus' => 'basic_entity_plus.controller.inc',
    'BasicEntityPlusController' => 'basic_entity_plus.controller.inc',
    'BasicEntityPlusTypeController' =>  'basic_entity_plus.controller.inc',
    'views_handler_field_basic_entity_plus_link_edit' => 'views/views_handler_field_basic_entity_plus_link_edit.inc',
    'views_handler_field_basic_entity_plus_link' => 'views/views_handler_field_basic_entity_plus_link.inc',
    'views_handler_field_basic_entity_plus_link_delete' => 'views/views_handler_field_basic_entity_plus_link_delete.inc',
  );
}

/**
 * Implements hook_entity_info_alter().
 * This function modifies the global entity info definition
 * to propery create definitions for the different bundles or "types"
 * created through the UI under admin/structure/basic_entity_plus-types
 */
function basic_entity_plus_entity_info_alter(&$entity_info) {
  foreach (basic_entity_plus_types() as $type => $info) {
    $entity_info['basic_entity_plus']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/basic_entity_plus-types/manage/%basic_entity_plus_type',
        'real path' => 'admin/structure/basic_entity_plus-types/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/** 
 * Returns the URI for basic_entity_plus entities
 * @param $entity_type
 *    The entity type
 * @param $entity
 *    The entity for which to generate a path
 * @return
 *   An array containing the 'path' and 'options' keys used to build the URI of
 *   the entity, and matching the signature of url(). NULL if the entity has no
 *   URI of its own.
 */
function basic_entity_plus_uri($entity_type, $entity) {
  return array(
    'path' => 'basic_entity_plus/'.$entity->id(),
    'options' => array(),
  );
}

/**
 * Returns the URI for basic_entity_plus_type configuration entity
 * This is here only because the entity types overview table generated
 * by Entity UI needs a URI callback to create a link. Another option is
 * for this callback to return an empty string. 
 */
function basic_entity_plus_type_uri($entity_type, $entity) {
  return array(
    'path' => 'admin/structure/basic_entity_plus-types/manage',
    'options' => array(),
  );
}

/**
 * Implements hook_menu().
 * Entity UI provides links to add, edit and delete entities and bundles
 * as well as tabs to manage fields and displays for this entity type
 */
function basic_entity_plus_menu() {
  $items = array();
  
  // The only link we provide is for the delete bulk operation
  $items['admin/structure/basic_entity_plus/action/delete'] = array(
    'title' => 'Confirm basic_entity_plus deletion',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('basic_entity_plus_multiple_delete_confirm'),
    'access arguments' => array('edit any basic_entity_plus entity'),
    'file' => 'basic_entity_plus.admin.inc',
  );

  return $items;
}

/** 
 * Implements hook_menu_alter().
 * 
 * Modifies the add link to appear in the administrative view of entities
 */
function basic_entity_plus_menu_alter(&$items) {
  $items['basic_entity_plus/add']['tab_parent'] = 'admin/content/basic-entity-plus/list';
  $items['basic_entity_plus/add']['tab_root'] = 'admin/content';

  // The following alteration is done because of a bug in Entity UI
  // see https://github.com/backdrop-contrib/entity_ui/issues/7
  // @todo Remove when the bug is fixed
  $items['basic_entity_plus/add']['page callback'] = 'basic_entity_plus_bundle_add_page'; 
}
/**
 * Implements hook_permission().
 */
function basic_entity_plus_permission() {
  $permissions = array(
    'administer basic_entity_plus types' => array(
      'title' => t('Administer basic_entity_plus types'),
      'description' => t('Allows users to configure basic_entity_plus types and their fields.'),
      'restrict access' => TRUE,
    ),
    'create basic_entity_plus entities' => array(
      'title' => t('Create basicentities'),
      'description' => t('Allows users to create basicentities.'),
      'restrict access' => TRUE,
    ),
    
    'view own basic_entity_plus entities' => array(
      'title' => t('View own basicentities'),
      'description' => t('Allows users to view own basicentities.'),
      'restrict access' => TRUE,
    ),
    
    'view basic_entity_plus entities' => array(
      'title' => t('View basicentities'),
      'description' => t('Allows users to view basicentities.'),
      'restrict access' => TRUE,
    ),
    'edit any basic_entity_plus entities' => array(
      'title' => t('Edit any basicentities'),
      'description' => t('Allows users to edit any basicentities.'),
      'restrict access' => TRUE,
    ),
    'edit own basic_entity_plus entities' => array(
      'title' => t('Edit own basicentities'),
      'description' => t('Allows users to edit own basicentities.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}


/**
 * Implements hook_entity_property_info_alter().
 * 
 * This hook provides property definitions for metadata wrappers and views
 */
function basic_entity_plus_entity_property_info_alter(&$info) {
  $properties = &$info['basic_entity_plus']['properties'];
    
  $properties['title'] = array(
    'label' => t('Title'),
    'type' => 'text',
    'description' => t('The title of the basic_entity_plus.'),
    'setter callback' => 'entity_plus_property_verbatim_set',
    'schema field' => 'title',
  );

  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the basic_entity_plus was posted."),
    'setter callback' => 'entity_plus_property_verbatim_set',
    'setter permission' => 'administer basic_entity_plus entities',
    'schema field' => 'created',
  );

  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'setter callback' => 'entity_plus_property_verbatim_set',
    'description' => t("The date the basic_entity_plus was most recently updated."),
  );

  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the basic_entity_plus."),
    'setter callback' => 'entity_plus_property_verbatim_set',
    'setter permission' => 'administer basic_entity_plus entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}

/**
 * Implements hook_action_info().
 * 
 * Defines the delete bulk operation
 */
function basic_entity_plus_action_info() {
  return array(
    'basic_entity_plus_delete_action' => array(
      'type' => 'basic_entity_plus',
      'label' => t('Delete basic_entity_plus'),
      'callback' => 'basic_entity_plus_delete_action'
    ),
  );
}

/**
 * Callback for bulk operation. Queues a basic_entity_plus for deletion.
 *
 * @param BasicEntityPlus $basic_entity_plus
 *   A basic_entity_plus entity.
 * @param $context
 *   Contextual information about the triggered action.
 *
 * @ingroup actions
 */
function basic_entity_plus_delete_action($basic_entity_plus, &$context) {
  // Save the list of basic_entities to be deleted in the session. Append to the existing
  // list if within the last minute, otherwise start a new list of basic_entities.
  $last_action_time = 0;
  if (isset($_SESSION['basic_entity_plus_delete_action'])) {
    $last_action_time = $_SESSION['basic_entity_plus_delete_action']['timestamp'];
  }
  if (REQUEST_TIME - $last_action_time > 60) {
    $_SESSION['basic_entity_plus_delete_action'] = array(
      'timestamp' => REQUEST_TIME,
      'basic_entity_plus_ids' => array(),
    );
  }

  $_SESSION['basic_entity_plus_delete_action']['basic_entity_plus_ids'][] = $basic_entity_plus->basic_entity_plus_id;
  $context['redirect'] = 'admin/structure/basic_entity_plus/action/delete';
}

/*******************************************************************************
 ********************************* BasicEntityPlus API's ***********************
 ******************************************************************************/

/**
 * Access callback for basic_entity_plus.
 */
function basic_entity_plus_access($op, EntityInterface $basic_entity_plus = NULL, $account = NULL, $entity_type = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer basic_entity_plus entities', $account)
          || user_access('create basic_entity_plus entities', $account);
      break;
    case 'view':
      return user_access('administer basic_entity_plus entities', $account)
          || user_access('view basic_entity_plus entities', $account)
          || (user_access('view own basic_entity_plus entities', $account) && ($basic_entity_plus->uid == $account->uid));
      break;

    case 'update':
    case 'edit':
    case 'delete':
      return user_access('administer basic_entity_plus entities')
          || user_access('edit any basic_entity_plus entities')
          || (user_access('edit own basic_entity_plus entities') && ($basic_entity_plus->uid == $account->uid));
      break;    
  }
  return FALSE;
}

/**
 * Load a basic_entity_plus.
 */
function basic_entity_plus_load($basic_entity_plus_id, $reset = FALSE) {
  $entities = basic_entity_plus_load_multiple(array($basic_entity_plus_id), array(), $reset);
  return reset($entities);
}

/**
 * Load multiple basic_entities based on certain conditions.
 */
function basic_entity_plus_load_multiple($basic_entity_plus_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load_multiple('basic_entity_plus', $basic_entity_plus_ids, $conditions, $reset);
}

/**
 * Save basic_entity_plus.
 */
function basic_entity_plus_save($basic_entity_plus) {
  return entity_plus_save('basic_entity_plus', $basic_entity_plus);
}

/**
 * Delete single basic_entity_plus.
 */
function basic_entity_plus_delete($basic_entity_plus) {
  entity_delete_multiple('basic_entity_plus', array(entity_plus_id('basic_entity_plus', $basic_entity_plus)));
}

/**
 * Delete multiple basic_entities.
 */
function basic_entity_plus_delete_multiple($basic_entity_plus_ids) {
  entity_delete_multiple('basic_entity_plus', $basic_entity_plus_ids);
}

/*******************************************************************************
 ****************************** BasicEntityPlus Type API  **********************
 ******************************************************************************/

/**
 * Access callback for basic_entity_plus Type.
 */
function basic_entity_plus_type_access($op) {
  return user_access('administer basic_entity_plus types');
}

/**
 * Load basic_entity_plus Type.
 */
function basic_entity_plus_type_load($basic_entity_plus_type) {
  return basic_entity_plus_types($basic_entity_plus_type);
}

/**
 * List of basic_entity_plus Types.
 */
function basic_entity_plus_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('basic_entity_plus_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save basic_entity_plus type entity.
 */
function basic_entity_plus_type_save($basic_entity_plus_type) {
  $op = entity_plus_save('basic_entity_plus_type', $basic_entity_plus_type);
  return $op;
}

/**
 * Delete single case type.
 */
function basic_entity_plus_type_delete($basic_entity_plus_type) {
  entity_delete_multiple('basic_entity_plus_type', array(entity_plus_id('basic_entity_plus_type',$basic_entity_plus_type)));
}

/**
 * Delete multiple case types.
 */
function basic_entity_plus_type_delete_multiple($basic_entity_plus_type_ids) {
  entity_delete_multiple('basic_entity_plus_type', $basic_entity_plus_type_ids);
}

/**
 * Implements hook_views_api().
 * 
 * This hook will help Backdrop discover the custom handlers in the /views folder
 */
function basic_entity_plus_views_api() {
  return array(
    'api' => '3.0',
    'path' => backdrop_get_path('module', 'basic_entity_plus').'/views',
  );
}


/**
 * Implements hook_field_extra_fields().
 *
 * This exposes the "extra fields" (usually properties that can be configured
 * as if they were fields) of the entity as pseudo-fields
 * so that they get handled by the Entity and Field core functionality.
 */
function basic_entity_plus_field_extra_fields() {
  $extra_fields = array();
  
  $display['title'] = array(
    'weight' => -10,
    'label' => t('Title'),
    'description' => t('The name of the basic_entity_plus.'),
  );
  
  $form['title'] = array(
    'weight' => -10,
    'label' => t('Title'),
    'description' => t('The name of the basic_entity_plus.'),
  );

  $display['created'] = array(
    'label' => t("Date created"),
    'weight' => 0,
    'description' => t("The date the basic_entity_plus was posted."),
  );

  foreach (basic_entity_plus_types() as $type => $info) {
    $extra_fields['basic_entity_plus'][$type]['form'] = $form;
    $extra_fields['basic_entity_plus'][$type]['display'] = $display;
  }
  return $extra_fields;
}


/**
 * Page callback to show links to add an entity of a specific bundle.
 * 
 * NOTE: This is a temporary fix to a  Entity UI bug reported here:
 * https://github.com/backdrop-contrib/entity_ui/issues/7
 *
 * @todo Remove when that bug is fixed
 * 
 * Entity modules that provide a further description to their bundles may wish
 * to implement their own version of this to show these.
 *
 * @param $entity_type
 *   The type of the entity.
 */
function basic_entity_plus_bundle_add_page($entity_type) {
  // Set the title, as we're a MENU_LOCAL_ACTION and hence just get tab titles.
  backdrop_set_title(entity_ui_get_action_title('add', $entity_type));

  // Get entity info for our bundles.
  $info = entity_get_info($entity_type);
  $items = array();
  foreach ($info['bundles'] as $bundle_name => $bundle_info) {
    // Create an empty entity with just the bundle set to check for access.
    $dummy_entity = entity_create($entity_type, array(
      $info['entity keys']['bundle'] => $bundle_name,
    ));
    // If modules use a uid, they can default to the current-user
    // in their create() method on the storage controller.
    if (entity_access('create', $entity_type, $dummy_entity, $account = NULL)) {
      $add_path = $info['admin ui']['path'] . '/add/' . $bundle_name;
      $items[] = l(t('Add @label', array('@label' => $bundle_info['label'])), $add_path); 
    }
  }
  return theme('item_list', array('items' => $items));
}
